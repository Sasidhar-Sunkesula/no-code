// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id // Using Clerk Id as the primary key
  username       String         @unique
  email          String         @unique
  profilePicture String?
  createdAt      DateTime       @default(now())
  projects       Project[]
  subscription   Subscription[]
}

model Plan {
  type              Plans          @id @unique
  dailyTokenLimit   Int
  monthlyTokenLimit Int
  price             Decimal
  subscriptions     Subscription[]

  @@index([type])
}

model Subscription {
  id                 String             @id @default(cuid())
  userId             String
  planType           Plans
  status             SubscriptionStatus
  startDate          DateTime           @default(now())
  endDate            DateTime
  dailyTokensUsed    Int                @default(0)
  dailyTokensReset   DateTime           @default(now())
  monthlyTokensUsed  Int                @default(0)
  monthlyTokensReset DateTime           @default(now())
  paymentProvider    String?
  paymentId          String?
  //  Deletes subscription if user is deleted
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  //  Deletes subscription if plan is deleted
  plan               Plan               @relation(fields: [planType], references: [type], onDelete: Cascade)

  @@index([userId])
  @@index([planType])
}

model Project {
  id             String       @id @default(cuid())
  name           String
  state          ProjectState @default(new)
  templateName   String?
  ignorePatterns String[]     @default([])
  createdAt      DateTime     @default(now())
  userId         String
  files          File[]
  messages       Message[]
  // Deletes project if user is deleted
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model File {
  id        String   @id @default(cuid())
  filePath  String
  content   String
  timestamp DateTime @default(now())
  projectId String
  // Deletes files if project is deleted
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Add unique constraint for upsert
  @@unique([projectId, filePath])
}

// Never update the createdAt field, only insert it once
model Message {
  id         String   @id @default(cuid())
  role       Role
  content    Json
  createdAt  DateTime @default(now())
  projectId  String
  tokensUsed Int      @default(0)
  // Deletes messages if project is deleted
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([createdAt])
}

enum Role {
  user
  assistant
}

enum Plans {
  free
  pro
  enterprise
}

enum SubscriptionStatus {
  active
  expired
  canceled
}

enum ProjectState {
  new
  existing
  blankTemplate
}
